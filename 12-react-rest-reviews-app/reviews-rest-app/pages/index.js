import {useState} from 'react'

import Head from 'next/head'

import Avatar from '@mui/material/Avatar';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import CardContent from '@mui/material/CardContent';
import Container from '@mui/material/Container';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';

import DeleteIcon from '@mui/icons-material/Delete';

// let's import our Navbar
import Navbar from '../components/Navbar';
// let's import our ReviewForm
import ReviewForm from '../components/NewReview';
import ReviewCard from '../components/ReviewCard';

import { getReviews, deleteReview } from '../utils/api/reviews';


const MOCK_ADAPTATION_RATING = [{
  'title': 'Fight Club',
  'comment': 'Great movie and book',
  'rating': 10
}]


export default function Home() {
  // make the stateful variables
  // put them in the jsx

  // all of the reviews that we're going to loop through.
  const [reviews, setReviews] = useState(MOCK_ADAPTATION_RATING)

  // make the request of adaptation ratings/reviews to the backend
  // set the state.
  const loadReviews = async () => {
    try {
      // we just swap it out.
      const data = await getReviews()
      console.log(data)
      // set the reviews to what we've fetched from the backend
      setReviews(data)
    } catch (error) {
      console.log(error)
      // let's display something later on.
    }
  }


  // I want you to add a delete icon on the card.
  // we're going to add a delete by id.
  const removeReview = async (id) => {
    console.log("removing review with id: ", id)
    try {
      await deleteReview(id)

      // a great place to display a toast message
      // our two options are the same as post request.
      // you can update on the frontend or refresh the data
      // on the backend.
      // Option 1
      // let tempReviews = reviews.filter((review)=> {
      //   // this is going to loop through the reviews
      //   // we're going to say keep all of htem that don't have
      //   // the id passed ( which is the one to remove.)
      //   return review.id !== id
      // })
      // setReviews(tempReviews)
      // Option 2 just load the reviews (this is preferred)
      await loadReviews()

      // Note: we can't use splice because that's using the index
      // and not the value in the object.
    } catch (error) {
      // we'll display something to the user.
      console.error(error)
    }


  }


  return (
    <div>
      <Head>
        <title>Adaptation Reviews.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* breakout the Navbar */}
      <Navbar />
      <main>
        <Container maxWidth="md">
          {/* breakout ReviewForm */}
          <ReviewForm
            loadReviews={loadReviews}
          />
          <Box
            sx={{
              pt: 2,
              pb: 2,
            }}
          >
            <Button
              variant="contained"
              onClick={loadReviews}
            >
              Load All Current Reviews
            </Button>
          </Box>
          {reviews.map((adaptation)=> {
            // replacing the card with
            // our new component.
            return <ReviewCard
              key={adaptation.id}
              id={adaptation.id}
              commment={adaptation.commment}
              title={adaptation.title}
              rating={adaptation.rating}
              loadReviews={loadReviews}
            />
          })}

        </Container>
      </main>
    </div>
  )
}

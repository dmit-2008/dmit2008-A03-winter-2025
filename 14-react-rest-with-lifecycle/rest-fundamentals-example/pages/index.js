// first thing I need to do is import useEffect
import { useState, useEffect } from "react"

import Head from 'next/head'

import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';

import Container from '@mui/material/Container';
// just to add the loading.
import CircularProgress from '@mui/material/CircularProgress';

import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';

export default function Home() {
  // let's make a state for loading and error
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("") // a string.

  // I want you to make essentially a stateful or values.
  const [quoteData, setQuoteData] = useState({
    quote: "Default quote",
    author: "default author"
  }) // there's none

  // I want you to useEffect to load the random quote on mount
  // we'll have a discussion about handling all states.
  useEffect(()=> {
    console.log("Mounted")
    // we're going to call an async function synchronously
    // because you cant await in effect.
    // that's okay because we're not using the result of
    // function loadRandomQuote
    loadRandomQuote()
  }, []) // empty dependency array means onmount (or unmount but won't use that much.)
  // a note: in react 18-19, the react team made this effect with strict mode get called twice.
  // but you can either option 1: turn off strict mode (just for now) in next.config.js
  // option 2: use async fetch library like react-query.

  // I want you to create a function that is async
  // makes a request to https://stoic.tekloon.net/stoic-quote to get a random quote.
  const loadRandomQuote = async () => {
    // we're in the process of making the
    // request.
    setIsLoading(true)
    const QUOTE_URL = "/api/random_quote"
    try {
      // let's essentially make a request here.
      const response = await fetch(QUOTE_URL);
      console.log(response)
      // throw an error for anything that
      // isn't a 2XX status or response.ok
      if (!response.ok) {
        throw Error("Error while making the request.")
      }

      // let's parse the response from json to a js object
      const randomQuoteData = await response.json()

      console.log(randomQuoteData)
      setQuoteData(randomQuoteData)
      // we have successfully fetched the data.
      setIsLoading(false)
      setError("") // just in case.
    } catch (error) {
      // this is the state when there is a backend
      // error.
      setIsLoading(false)
      console.log(error)
      setError("error while making the request")
      // should be visible to the user whenever you handle an error
    }
  }

  // let's talk about some states when you're fetching an item
  // 1. when you're making the request tere's a loading state.
  // 2. some error state you need to notify the user.
  // 3. fetched successfully an the data is there.
  // we're going to implement some of these states and return early

  // we're going return early if we are loading
  if (isLoading) {
    return <>
      <Container>
        <Box sx={{ display: 'flex' }}>
          <CircularProgress />
        </Box>
      </Container>
    </>
  }

  // handle the error state.
  if (error !=="") {
    return <>
      Error: {error}
    </>
  }

  // what we've done with everything above is make it
  // so that we handle all states here.

  // I want you to set the values in the jsx for this quote.
  return (
    <div>
      <Head>
        <title>We Love Quotes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>
      <AppBar position="relative">
        <Toolbar>
          <Typography variant="h6" color="inherit" noWrap>
            We Love Quotes
          </Typography>
        </Toolbar>
      </AppBar>
      <main>
        <Container maxWidth="sm">
          <Box
            sx={{
              bgcolor: 'background.paper',
              pt: 8,
              pb: 6,
            }}
          >
            {/*
              Now that we've added this state,
              set the original state to a default
              or I can return early.
            */}
            <Typography variant="h5" align="center" color="text.primary" paragraph>
              {quoteData.quote}
            </Typography>
            <Typography
              component="h1"
              variant="h4"
              align="center"
              color="text.secondary"
              gutterBottom
            >
              {quoteData.author}
            </Typography>
            <Box
             display="flex"
             justifyContent="center"

            >
              <Button
                variant="contained"
                onClick={loadRandomQuote}
              >
                Get New Quote
              </Button>
            </Box>
          </Box>
        </Container>
      </main>
    </div>
  )
}
